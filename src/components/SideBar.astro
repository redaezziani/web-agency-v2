---
import { Image } from "astro:assets";

const navLinks = [
{
        name: 'Home',
        href: '/#',
        label: '#',
    },
    {
        name: 'About',
        href: '/#about',
        label: 'about',
    },
    {
        name: 'Services',
        href: '/#services',
        label: 'services',
    },
    {
        name: 'Pricing',
        href: '/#pricing',
        label: 'pricing',
    },
    {
        name: 'Contact',
        href: '/#contact',
        label: 'contact',
    },
];
---

<div
    x-data="{ open: false }"
    x-on:keydown.escape="open = false"
    x-on:keydown.tab="open = false"
    x-on:keydown.shift.tab="open = false"
    x-on:side-bar-open.window="open = true"
    x-on:side-bar-close.window="open = false"
    x-on:click.outside="open = false"
    x-show="open"
    style="display: none"   
    class="w-full z-[999] overflow-hidden h-screen backdrop-blur-sm bg-black/10 fixed left-0 top-0"
>
    <div
        x-on:click="open = false"
        class="w-full z-[1] overflow-hidden h-screen backdrop-blur-sm bg-black/20"
    ></div>

    <aside
        x-show="open"
        x-transition:enter="transition ease-out duration-200"
        x-transition:enter-start="transform -translate-x-full"
        x-transition:enter-end="transform translate-x-0"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="transform translate-x-0"
        x-transition:leave-end="transform -translate-x-full"
        class="w-[25rem] z-10 absolute left-0 top-0 h-screen flex bg-white flex-col gap-4 justify-start items-start p-4"
    >
    <div class="w-full flex justify-between items-center">
        <a
        class=" flex justify-start items-center gap-1"
        href="/">
         <Image
         width={20}
         height={20}
         src="/icon.png"
         alt="web site logo"
         />
         <h1 class="font-bold text-primary text-xl uppercase">Agency</h1>
        </a>

        <button
            x-on:click="open = false"
            class="border text-slate-500 border-slate-400/35 focus:border-primary focus:outline-primary focus:outline-2 focus:outline-offset-2 p-1 rounded-md"
        >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"  fill="none">
            <path
                d="M6 18L18 6M6 6l12 12"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </svg>
        </button>
    </div>
    <h1
    class="text-slate-700 text-lg font-bold"
    >
        Navigation
    </h1>
    <ul
    id="side-bar-nav-links"
    class="flex flex-col gap-4">
        {
            navLinks.map((link) => {
                return (
                    <li class=" text-slate-500 text-sm focus:text-primary transition-all ease-in-out duration-300 cursor-pointer">
                        <a
                        aria-label={link.label}
                        x-on:click="open = false"
                        href={`${link.href}`}
                        >{link.name}</a>
                    </li>
                );
            })
        }
    </ul>
</aside>
</div>


<script>
    // Use a standard event like 'DOMContentLoaded'
    document.addEventListener("DOMContentLoaded", () => {
      const sections = document.querySelectorAll("section"); // Ensure sections exist on your page
      const navItems = document.querySelectorAll("ul li a");
  
      const callback = (entries:any) => {
        entries.forEach((entry:any) => {
          if (entry.isIntersecting) {
            navItems.forEach((item) => {
              if (item.getAttribute("aria-label") === entry.target.id) {
                item.classList.add("text-primary");
              } else {
                
                item.classList.remove("text-primary");
                // else remove the class and add it to the home link
                if (entry.target.id === "about") {
                  navItems[0].classList.add("text-primary");
                }
              }
            });
          }
        });
      };
  
      const observer = new IntersectionObserver(callback, {
        root: null,
        rootMargin: "100px",
        threshold: 0.7,
      });
  
      sections.forEach((section) => {
        observer.observe(section);
      });
  
      // Cleanup function to disconnect observer when not needed
      document.onvisibilitychange = () => {
        if (document.visibilityState === "hidden") {
          observer.disconnect();
        } else {
          sections.forEach((section) => {
            observer.observe(section);
          });
        }
      };
    });
  </script>
  
